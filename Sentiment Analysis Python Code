#Import libraries

import pandas as pd
import pyodbc
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Dowloading the VADER lexicon for Sentimental Analysis
nltk.download('vader_lexicon')

#Defining a function to fetch data from our SQL database using a query
def fetch_data_from_sql():
    conn_str = (
        "Driver={SQL Server};" #Specifies the driver
        "Server=DESKTOP-RJLOR9F\SQLEXPRESS;" #Specifies the server we connected to
        "Database=PortfolioProject_MarketingAnalytics;" #This is the database we are connecting to
        "Trusted_Connection=yes;" #Using Windows Authentication for the connection
    )
    #Using  variable to establish a connection
    conn = pyodbc.connect(conn_str)
    
    #Defining the SQL Query to fetch data from the table we want to bring in
    query = "SELECT ReviewID, CustomerID, ProductID, ReviewDate, Rating, ReviewText FROM dbo.customer_reviews"
    
    #Executing the Query and bringing it into a dataframe 
    df = pd.read_sql(query, conn)
    
    #Closing a connection to our SQL Server to save resources
    conn.close()
    
    #Returns the data into a DataFrame
    return df

#Fetching customer reviews from the SQL database
customer_reviews_df = fetch_data_from_sql()

#Initializing the VADER sentiment intensity analyzer for analyzing sentiment of the text data
sia = SentimentIntensityAnalyzer()

#Defining a function to calculate sentiment scores using VADER
def calculate_sentiment(review):
    #Get the sentiment scores for the review text
    sentiment = sia.polarity_scores(review)
    #REturn the compound score, which is a normalized score between -1 (most negative) and +1 (most positive)
    return sentiment['compound']

#Defining a function to categorize sentiment using both the sentiment score and the review rating
def categorize_sentiment(score, rating):
    #Use both the text sentiment score and the numerical rating to determine the sentiment category
    if score > 0.05: #A positive sentiment score
        if rating >= 4:
            return 'Positive' #A high rating and high positive sentiment
        elif rating == 3:
            return 'Mixed Positive' #Neutral rating but positive sentiment
        else:
            return 'Mixed Negative' #Low rating but Positive sentiment
    elif score < -0.05: #A negative sentiment score
        if rating <= 2:
            return 'Negative' #Low rating with negative sentiment
        elif rating == 3:
            return 'Mixed negative' #Neutral rating with negative sentiment
        else:
            return 'Mixed Positive' #High rating with negative sentiment
    else: #A neutral sentiment score
        if rating >= 4:
            return 'Positive' #High rating with neutral sentiment
        elif rating <= 2:
            return 'Negative' #Low rating with neutral sentiment
        else:
            return 'Neutral' #Neutral rating with neutral sentiment

#Defining a function to bucket sentiment scores into text ranges
def sentiment_bucket(score):
    if score >= 0.5:
        return '0.5 to 1.0' #A strongly positive sentiment
    elif 0.0 <= score < 0.5:
        return '0.0 to 0.49' #A mildly positive sentiment
    elif -0.5 <= score < 0.0:
        return '-0.49 to 0.0' #A mildly negative sentiment
    else:
        return '-1.0 to -0.5' #A strongly negative sentiment
    
#Applying sentiment analysis to calculate sentiment scores for each review    
customer_reviews_df['SentimentScore'] = customer_reviews_df['ReviewText'].apply(calculate_sentiment)

#Applying sentiment categorization using both text and rating
customer_reviews_df['SentimentCategory'] = customer_reviews_df.apply(
    lambda row: categorize_sentiment(row['SentimentScore'], row['Rating']), axis=1)

#Applying sentiment bucketing to categorize scores into defined range
customer_reviews_df['SentimentBucket'] = customer_reviews_df['SentimentScore'].apply(sentiment_bucket)

#Printing the first 5 entries into the terminal to check our work
print(customer_reviews_df.head())

#Exporting our DataFrame into a CSV with our new sentiment scores, categories, and buckets
customer_reviews_df.to_csv('fact_customer_reviews_with_sentiment.csv', index = False)
